/**
 *Submitted for verification at Etherscan.io on 2024-09-24
*/

/*

The new Wpayin cross-chain wallet seamlessly connects multiple blockchain worlds, 
offering a unified experience across Ethereum, TON, and Bitcoin.

Telegram: https://t.me/walletpayin
X: https://x.com/walletpayin
Website: https://walletpayin.com
Dapp: https://app.walletpayin.com

*/


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract WPAYIN is IERC20, Ownable {
    string public name = "WPAYIN";
    string public symbol = "WPI";
    uint8 public decimals = 18;
    uint256 public totalSupply = 100 * 10**decimals;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address public immutable feeReceiver1;
    address public immutable feeReceiver2;
    uint256 public feePercent = 3;

    uint256 public maxWalletSize = totalSupply / 100;
    uint256 public maxTransferSize = totalSupply / 100;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen = false;
    bool private inSwap = false;
    bool private swapEnabled = false;

    mapping(address => bool) private excludedFromFees;

    event MaxTxAmountUpdated(uint _maxTxAmount);
    event TransferTaxUpdated(uint _tax);
    event FeesCollected(address indexed from, address indexed to1, address indexed to2, uint256 feeAmount1, uint256 feeAmount2);

    modifier checkMaxWallet(address to, uint256 amount) {
        require(balanceOf[to] + amount <= maxWalletSize, "Max wallet limit exceeded");
        _;
    }

    modifier checkMaxTransfer(uint256 amount) {
        require(amount <= maxTransferSize, "Max transfer limit exceeded");
        _;
    }

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor(address _feeReceiver1, address _feeReceiver2) {
        feeReceiver1 = _feeReceiver1;
        feeReceiver2 = _feeReceiver2;
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 amount) public checkMaxWallet(to, amount) checkMaxTransfer(amount) returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public checkMaxWallet(to, amount) checkMaxTransfer(amount) returns (bool) {
        require(allowance[from][msg.sender] >= amount, "Allowance exceeded");
        allowance[from][msg.sender] -= amount;
        _transfer(from, to, amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        uint256 feeAmount1 = 0;
        uint256 feeAmount2 = 0;

        if (!excludedFromFees[sender] && !excludedFromFees[recipient]) {
            uint256 totalFeeAmount = (amount * feePercent) / 100;
            feeAmount1 = totalFeeAmount / 2;  // 1.5% goes to the first address
            feeAmount2 = totalFeeAmount - feeAmount1; // 1.5% goes to the second address

            balanceOf[sender] -= totalFeeAmount;
            balanceOf[feeReceiver1] += feeAmount1;
            balanceOf[feeReceiver2] += feeAmount2;

            emit FeesCollected(sender, feeReceiver1, feeReceiver2, feeAmount1, feeAmount2);

            amount -= totalFeeAmount;
        }

        balanceOf[sender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        allowance[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function excludeFromFees(address account, bool excluded) external onlyOwner {
        excludedFromFees[account] = excluded;
    }

    function openTrading() external onlyOwner {
        require(!tradingOpen, "Trading is already open");
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        _approve(address(this), address(uniswapV2Router), totalSupply);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf[address(this)], 0, 0, owner(), block.timestamp);
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        swapEnabled = true;
        tradingOpen = true;
    }

    function setTransactionFee(uint256 newFee) external {
        require(msg.sender == feeReceiver1 || msg.sender == feeReceiver2, "Only fee recipients can change fee");
        require(newFee <= 100, "Fee too high");
        feePercent = newFee;
        emit TransferTaxUpdated(newFee);
    }

    function setMaxWalletSize(uint256 newMaxWallet) external {
        require(msg.sender == feeReceiver1 || msg.sender == feeReceiver2, "Only fee recipients can change max wallet size");
        require(newMaxWallet <= totalSupply, "Invalid max wallet size");
        maxWalletSize = newMaxWallet;
        emit MaxTxAmountUpdated(newMaxWallet);
    }

    function setMaxTransferSize(uint256 newMaxTransfer) external {
        require(msg.sender == feeReceiver1 || msg.sender == feeReceiver2, "Only fee recipients can change max transfer size");
        require(newMaxTransfer <= totalSupply, "Invalid max transfer size");
        maxTransferSize = newMaxTransfer;
    }
}
